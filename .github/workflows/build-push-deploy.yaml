name: Create, publish and deploy half-byte-backend Docker image

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ci-cd-dhbw-hdh-pschoeppner/${{ github.event.repository.name }}
  CONTAINER_NAME: ${{ github.event.repository.name }}

jobs:
  #build-and-push-image:
  #  runs-on: ubuntu-latest
  #  permissions:
  #    contents: read
  #    packages: write
#
  #  steps:
  #    - name: Checkout repository
  #      uses: actions/checkout@v3
#
  #    - name: Build gradle
  #      run: gradle build -Dquarkus.package.type=native
#
  #    - name: Log in to the Container registry
  #      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
  #      with:
  #        registry: ${{ env.REGISTRY }}
  #        username: ${{ github.actor }}
  #        password: ${{ secrets.GITHUB_TOKEN }}
#
  #    - name: Extract metadata (tags, labels) for Docker
  #      id: meta
  #      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
  #      with:
  #        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #        github-token: ${{ secrets.GITHUB_TOKEN }}
#
  #    - name: Build and push Docker image
  #      uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
  #      with:
  #        context: .
  #        file: src/main/docker/Dockerfile.native
  #        push: true
  #        tags: ${{ steps.meta.outputs.tags }}
  #        labels: ${{ steps.meta.outputs.labels }}

  deploy-to-digital-ocean:
    #needs: build-and-push-image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.3
        with:
          HOST: ${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }}
          USERNAME: ${{ secrets.DIGITAL_OCEAN_SSH_USER_NAME }}
          KEY: ${{ secrets.DIGITAL_OCEAN_SSH_PRIVATE_KEY }}
          envs: IMAGE_NAME,CONTAINER_NAME,GITHUB_SHA,COMMAND
          script: |
            # Stop running container
            docker stop $(echo $CONTAINER_NAME) || true
            
            # Remove old container
            docker rm $(echo $CONTAINER_NAME) || true
            
            # Run a new container from a new image
            docker run -d \
            --restart always \
            -p 8080:8080 \
            --name $(echo $CONTAINER_NAME) \
            $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7) $(echo $COMMAND)
